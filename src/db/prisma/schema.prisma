// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id
  email             String      @unique
  encryptedPassword String
  createdAt         DateTime    @default(now())
  nickname          String     @unique
  introduceOneLine  String
  tweets            Tweets[]
  comments          Comments[]
  bookmarkedTwitts  Bookmarks[]
  profile Profile?
}

model Tweets {
  id         Int         @id @default(autoincrement())
  authorId   String
  author     User        @relation(fields: [authorId], references: [id])
  content    String
  comments   Comments[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
  bookmarked Bookmarks[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  tweetId   Int
  tweet     Tweets   @relation(fields: [tweetId], references: [id], onDelete: Cascade) 
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Bookmarks {
  id      Int    @id @default(autoincrement())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  tweetId Int
  tweet   Tweets @relation(fields: [tweetId], references: [id])

  @@unique([userId, tweetId])
}

model Profile {
  id     Int  @id @default(autoincrement())
  userId String  @unique
  user   User @relation(fields: [userId], references: [id])
}

// model Follow{
//   followerId Int
//   followingId Int
//   follower User @relation(fields: [followerId])
//   following User @relation(fields: [followingId])
// }
